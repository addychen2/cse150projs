ackage nachos.threads;

import nachos.ag.BoatGrader;

/**
 * This class simulates the boat problem, where children and adults need to cross from Oahu to Molokai.
 */
public class Boat {
    static BoatGrader bg;

    // Shared global variables
    static int adultsOnOahu = 0;
    static int childrenOnOahu = 0;
    static int adultsOnMolokai = 0;
    static int childrenOnMolokai = 0;
    static int boatLocation = 0; // 0 = Oahu, 1 = Molokai
    static final int boatCapacity = 2;
    static Lock lock = new Lock();
    static Condition canEnterBoat = new Condition(lock);

    /**
     * Self-test to begin different scenarios for the boat crossing.
     */
    public static void selfTest() {
        BoatGrader b = new BoatGrader();

        System.out.println("\n ***Testing Boats with only 2 children***");
        begin(0, 2, b);

        System.out.println("\n ***Testing Boats with 2 children, 1 adult***");
        begin(1, 2, b);

        System.out.println("\n ***Testing Boats with 3 children, 3 adults***");
        begin(3, 3, b);
    }

    /**
     * Starts the boat crossing with the specified number of adults and children.
     * 
     * @param adults the number of adults to cross
     * @param children the number of children to cross
     * @param b the BoatGrader instance to check the solution
     */
    public static void begin(int adults, int children, BoatGrader b) {
        bg = b;

        // Set initial state for the adults and children
        adultsOnOahu = adults;
        childrenOnOahu = children;
        adultsOnMolokai = 0;
        childrenOnMolokai = 0;

        // Create threads for each adult
        for (int i = 0; i < adults; i++) {
            Runnable r = new Runnable() {
                public void run() {
                    AdultItinerary();
                }
            };
            KThread t = new KThread(r);
            t.setName("Adult Thread " + i);
            t.fork();
        }

        // Create threads for each child
        for (int i = 0; i < children; i++) {
            Runnable r = new Runnable() {
                public void run() {
                    ChildItinerary();
                }
            };
            KThread t = new KThread(r);
            t.setName("Child Thread " + i);
            t.fork();
        }
    }

    /**
     * The itinerary for an adult.
     */
    static void AdultItinerary() {
        lock.acquire();

        while (childrenOnOahu > 0) {
            // Wait for a child to be ready to cross
            canEnterBoat.sleep();
        }

        // Adult rows the boat across to Molokai
        bg.AdultRowToMolokai();
        adultsOnOahu--;
        adultsOnMolokai++;

        // Wake up children to board the boat
        canEnterBoat.wake();
        lock.release();
    }

    /**
     * The itinerary for a child.
     */
    static void ChildItinerary() {
        lock.acquire();

        while (adultsOnOahu > 0) {
            // Wait for an adult to cross
            canEnterBoat.sleep();
        }

        // Two children cross to Molokai
        if (childrenOnOahu > 1) {
            bg.ChildRideToMolokai();
            childrenOnOahu -= 2;
            childrenOnMolokai += 2;
        }

        // Wake up any waiting adults
        canEnterBoat.wake();
        lock.release();
    }

    /**
     * A sample itinerary for the boat problem. (For demonstration purposes)
     */
    static void SampleItinerary() {
        System.out.println("\n ***Everyone piles on the boat and goes to Molokai***");
        bg.AdultRowToMolokai();
        bg.ChildRideToMolokai();
        bg.AdultRideToMolokai();
        bg.ChildRideToMolokai();
    }

    /**
     * Main method to run the test.
     */
    public static void main(String[] args) {
        selfTest();
    }
}
