public class Communicator {
    private Lock lock;
    private Condition speakerCondition;
    private Condition listenerCondition;
    private int message;
    private boolean messageAvailable;
    private int waitingSpeakers;
    private int waitingListeners;

    /**
     * Allocate a new communicator.
     */
    public Communicator() {
        lock = new Lock();
        speakerCondition = new Condition(lock);
        listenerCondition = new Condition(lock);
        messageAvailable = false;
        waitingSpeakers = 0;
        waitingListeners = 0;
    }

    /**
     * Wait for a thread to listen through this communicator, and then transfer
     * <i>word</i> to the listener.
     *
     * @param word the integer to transfer.
     */
    public void speak(int word) {
        lock.acquire();
        waitingSpeakers++;

        // Wait for a listener to be available
        while (messageAvailable || waitingListeners == 0) {
            speakerCondition.sleep();
        }

        message = word;
        messageAvailable = true;
        waitingSpeakers--;

        // Wake up a listener
        listenerCondition.wake();
        lock.release();
    }

    /**
     * Wait for a thread to speak through this communicator, and then return the
     * <i>word</i> that thread passed to <tt>speak()</tt>.
     *
     * @return the integer transferred.
     */
    public int listen() {
        lock.acquire();
        waitingListeners++;

        // Wait for a message to be available
        while (!messageAvailable) {
            listenerCondition.sleep();
        }

        int receivedMessage = message;
        messageAvailable = false;
        waitingListeners--;

        // Wake up a speaker if any are waiting
        if (waitingSpeakers > 0) {
            speakerCondition.wake();
        }

        lock.release();
        return receivedMessage;
    }
}
